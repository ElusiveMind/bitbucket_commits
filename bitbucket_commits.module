<?php

/**
 * Implements hook_menu().
 */
function bitbucket_commits_menu() {
  $items = array();
  $items['admin/config/development/bitbucket'] = array(
    'title' => 'Bitbucket Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bitbucket_commits_api_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('access bitbucket settings'),
  );
  $items['admin/config/development/bitbucket/api'] = array(
    'title' => 'API Settings',
    'description' => t('Settings for accessing BitBucket API as well as repositories to pull data from.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bitbucket_commits_api_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('access bitbucket settings'),
    'weight' => 1,
  );
  $items['admin/config/development/bitbucket/display'] = array(
    'title' => 'Display Settings',
    'description' => t('Configure colors and display configuration settings for statistic graphs.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bitbucket_commits_display_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('access bitbucket settings'),
    'weight' => 2,
  );
  $items['admin/config/development/bitbucket/sync'] = array(
    'title' => 'Sync',
    'page callback' => 'bitbucket_commits_sync',
    'access callback' => 'user_access',
    'access arguments' => array('access bitbucket settings'),
    'weight' => 3,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function bitbucket_commits_permission() {
  return array(
    'access bitbucket settings' => array(
      'title' => 'Settings',
    ),
  );
}

/**
 * API settings callback form.
 */
function bitbucket_commits_api_settings_form($form, &$form_state) {
  $form['bitbucket_username'] = array(
    '#title' => 'BitBucket Username',
    '#description' => t('The username for the configured BitBucket account.'),
    '#type' => 'textfield',
    '#size' => 64,
    '#maxlength' => 64,
    '#default_value' => variable_get('bitbucket_username', NULL),
  );
  $form['bitbucket_password'] = array(
    '#title' => 'BitBucket Password',
    '#description' => t('The password for the configured BitBucket account. Will not appear if already assigned. Only needs to be provided if not provided before or if the password has changed.'),
    '#type' => 'textfield',
    '#size' => 64,
    '#maxlength' => 64,
  );
  $form['bitbucket_repositories'] = array(
    '#title' => 'BitBucket Repositories',
    '#description' => t('One repository per line. Prefix with username/reponame'),
    '#type' => 'textarea',
    '#default_value' => variable_get('bitbucket_repositories', NULL),
  );
  $form['bitbucket_repositories_line_numbers'] = array(
    '#title' => 'BitBucket Repositories For Line Number Statistics',
    '#description' => t('One repository per line. Prefix with username/reponame. These are the repositories to track the number of line changes.'),
    '#type' => 'textarea',
    '#default_value' => variable_get('bitbucket_repositories_line_numbers', NULL),
  );
  $form['bitbucket_raw_names'] = array(
    '#title' => 'Other Possible Commit Names',
    '#description' => t('Other names a commit may be logged under aside from your username. Used to assign commits to your statistics. One per line. This can also be a partial name. Will be matched by substring.'),
    '#type' => 'textarea',
    '#default_value' => variable_get('bitbucket_raw_names', NULL),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );
  return $form;
}

/**
 * Submit callback for our API settings form. Handles password input so that if the password
 * field is empty and a password is already assigned, then it maintains the previously given
 * password. Also processes other api configuration values.
 */
function bitbucket_commits_api_settings_form_submit($form, &$form_state) {
  $current_password = variable_get('bitbucket_password', NULL);
  if ((!empty($current_password) && !empty($form_state['values']['bitbucket_password'])) || (empty($current_password))) {
    variable_set('bitbucket_password', $form_state['values']['bitbucket_password']);
  }

  $current_password = variable_get('bitbucket_password', NULL);
  if (!$current_password) {
    form_set_error('bitbucket_password', 'You must provide a password for this bitbucket account.');
  }
  else {
    variable_set('bitbucket_username', $form_state['values']['bitbucket_username']);
    variable_set('bitbucket_repositories', $form_state['values']['bitbucket_repositories']);
    variable_set('bitbucket_repositories_line_numbers', $form_state['values']['bitbucket_repositories_line_numbers']);
    variable_set('bitbucket_username', $form_state['values']['bitbucket_username']);
    variable_set('bitbucket_raw_names', $form_state['values']['bitbucket_raw_names']);
    drupal_set_message('BitBucket API settings successfully updated.', 'status');
    drupal_goto('admin/config/development/bitbucket/api');
  }
}

/**
 * Display settings administrative form.
 */
function bitbucket_commits_display_settings_form($form, &$form_state) {
  $form['bitbucket_activity_color_current'] = array(
    '#type' => 'markup',
    '#markup' => theme('bitbucket_commits_activity_graph'),
  );
  $form['bitbucket_activity_color_scheme'] = array(
    '#type' => 'select',
    '#title' => 'Color Scheme',
    '#description' => 'Select a color scheme for the contribution activity graph.',
    '#options' => array(
      'grey' => t('Grey'),
      'red' => t('Red'),
      'green' => t('Green'),
      'blue' => t('Blue'),
      'yellow' => t('Yellow'),
      'orange' => t('Orange'),
      'brown' => t('Brown'),
      'purple' => t('Purple'),
      'pink' => t('Pink'),
      'github' => t('GitHub'),
      'custom' => t('Custom (must provide hex values)'),
    ),
    '#default_value' => variable_get('bitbucket_activity_color_scheme', 'github'),
    '#required' => TRUE,
  );  
  $form['bitbucket_activity_custom_color1'] = array(
    '#type' => 'textfield',
    '#title' => 'Custom Color 1',
    '#description' => t('The full hex color for the lighest color indicating no activity.'),
    '#default_value' => variable_get('bitbucket_activity_custom_color1', '#EEEEEE'),
    '#maxlength' => 7,
    '#size' => 7,
    '#states' => array(
      'visible' => array('select[name="bitbucket_activity_color_scheme"]' => array('value' => 'custom')),
    ),
  );
  $form['bitbucket_activity_custom_color2'] = array(
    '#type' => 'textfield',
    '#title' => 'Custom Color 2',
    '#description' => t('The full hex color for a light color indicating light activity.'),
    '#default_value' => variable_get('bitbucket_activity_custom_color2', '#A0A0A0'),
    '#maxlength' => 7,
    '#size' => 7,
    '#states' => array(
      'visible' => array('select[name="bitbucket_activity_color_scheme"]' => array('value' => 'custom')),
    ),
  );
  $form['bitbucket_activity_custom_color3'] = array(
    '#type' => 'textfield',
    '#title' => 'Custom Color 3',
    '#description' => t('The full hex color for a light color indicating medium activity.'),
    '#default_value' => variable_get('bitbucket_activity_custom_color3', '#606060'),
    '#maxlength' => 7,
    '#size' => 7,
    '#states' => array(
      'visible' => array('select[name="bitbucket_activity_color_scheme"]' => array('value' => 'custom')),
    ),
  );
  $form['bitbucket_activity_custom_color4'] = array(
    '#type' => 'textfield',
    '#title' => 'Custom Color 4',
    '#description' => t('The full hex color for a dark color indicating moderate-heavy activity.'),
    '#default_value' => variable_get('bitbucket_activity_custom_color4', '#202020'),
    '#maxlength' => 7,
    '#size' => 7,
    '#states' => array(
      'visible' => array('select[name="bitbucket_activity_color_scheme"]' => array('value' => 'custom')),
    ),
  );
  $form['bitbucket_activity_custom_color5'] = array(
    '#type' => 'textfield',
    '#title' => 'Custom Color 5',
    '#description' => t('The full hex color for the darkest color indicating heavy activity.'),
    '#default_value' => variable_get('bitbucket_activity_custom_color5', '#000000'),
    '#maxlength' => 7,
    '#size' => 7,
    '#states' => array(
      'visible' => array('select[name="bitbucket_activity_color_scheme"]' => array('value' => 'custom')),
    ),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );
  return $form;
}

function _bitbucket_commits_custom_colors_form_elements(&$form, $extra = '') {

}

/**
 * Submit callback for the displays administrative form.
 */
function bitbucket_commits_display_settings_form_submit($form, &$form_state) {
  // If the color scheme is set to custom, then we must have hex values for each of the
  // custom color fields.
  if ($form_state['values']['bitbucket_activity_color_scheme'] == 'custom') {
    $color1 = $form_state['values']['bitbucket_activity_custom_color1'];
    $color2 = $form_state['values']['bitbucket_activity_custom_color2'];
    $color3 = $form_state['values']['bitbucket_activity_custom_color3'];
    $color4 = $form_state['values']['bitbucket_activity_custom_color4'];
    for($i = 1; $i <= 4; $i++) {
      $var = "color" . $i;
      if (empty($$var)) {
        form_set_error($$var, 'You must provide a hex color (complete with the #) for Custom Color ' . $i);
      }
    }
  }
  
  variable_set('bitbucket_activity_color_scheme', $form_state['values']['bitbucket_activity_color_scheme']);
  variable_set('bitbucket_activity_custom_color1', $form_state['values']['bitbucket_activity_custom_color1']);
  variable_set('bitbucket_activity_custom_color2', $form_state['values']['bitbucket_activity_custom_color2']);
  variable_set('bitbucket_activity_custom_color3', $form_state['values']['bitbucket_activity_custom_color3']);
  variable_set('bitbucket_activity_custom_color4', $form_state['values']['bitbucket_activity_custom_color4']);
  
  drupal_set_message('BitBucket display settings successfully updated.', 'status');
  drupal_goto('admin/config/development/bitbucket/display');    
}

/**
 * Run our cron manually and return to admin section.
 */
function bitbucket_commits_sync() {
  bitbucket_commits_cron();
  drupal_set_message('BitBucket synchronization completed.', 'status');
  drupal_goto('admin/config/development/bitbucket/display');
}
/**
 * Implements hook_cron().
 */
function bitbucket_commits_cron() {
  set_time_limit(0);
  _bitbucket_commits_retrieve();
}

/**
 * Retrieve all of the commits configured from bitbucket.
 */
function _bitbucket_commits_retrieve() {
  $repos = variable_get('bitbucket_repositories', FALSE);
  $repos_line = variable_get('bitbucket_repositories_line_numbers', FALSE);
  $username = variable_get('bitbucket_username', NULL);
  $password = variable_get('bitbucket_password', NULL);
  $raw_usernames = variable_get('bitbucket_raw_names', NULL);
  $raw_usernames = explode("\n", $raw_usernames);

  if (!empty($repos_line)) {
    $repos_line = explode("\n", $repos_line);
  }

  if (empty($repos)) {
    return FALSE;
  }

  $repos = explode("\n", $repos);
  $repositories = array();
  foreach($repos as $repo) {
    if (empty($repo)) {
      continue;
    }
    $repo = trim($repo);
    $url = 'https://api.bitbucket.org/2.0/repositories/' . $repo . '/commits?pagelen=100';
    do {
      $result = _bitbucket_commits_api_call($url, $username, $password);
      $json = json_decode($result);
      if ($json == FALSE) {
        drupal_set_message('BitBucket API rate limit exceeded', 'error');
        break 2;
      }
      if (empty($json->values)) {
        drupal_set_message('No repository named ' . $repo . '.', 'error');
        break;
      }
      if (count($json->values) > 0) {
        foreach ($json->values as $commit) {
          if (!array_key_exists($commit->repository->full_name, $repositories)) {
            $repository_information = bitbucket_commits_get_repository_information($repo, $username, $password);
            $repositories[$commit->repository->full_name] = $repository_information;
          };
          
          $cid = $commit->hash;
          $project = $commit->repository->full_name;
          $message = $commit->message;
          
          // Do timezone conversion of the date from BitBucket. All their times are in
          // UTC regardles of your timezone settings. Adjust this to Drupal's default
          // timezone for storage. Doing so here, enables our other time-sensitive
          // queries to work properly.       
          $commit->date = new DateTime($commit->date, new DateTimeZone('UTC'));
          $commit->date->setTimezone(new DateTimeZone(date_default_timezone()));
          $the_date = (array) $commit->date;
          $the_date['commit_date'] = (array) $commit->date->date;
          list($commit_date, $commit_time) = explode(' ', $the_date['date']);
          list($commit_time, $x) = explode('.', $commit_time);
          $commit->date = $commit_date . ' ' . $commit_time;

          $pass = FALSE;
          if (!empty($commit->author)) {
            if (!empty($commit->author->user->username) && $commit->author->user->username == $username) {
              $pass = TRUE;
            }
            elseif (!empty($commit->author->raw) && $commit->author->raw != $username) {
              foreach($raw_usernames as $raw_username) {
                if (strpos(strtolower($commit->author->raw), strtolower(trim($raw_username)))) {
                  $pass = TRUE;
                }
              }
            }
          }
          if ($pass == FALSE) {
            break 2;
          }
          // If we already have this hash, then continue to the next one.
          $check = db_select('commits', 'c')
                    ->fields('c')
                    ->condition('cid', $cid)
                    ->execute();
          if ($check->rowCount() > 0) {
            continue;
          }

          $files_changed = $lines_added = $lines_removed = 0;
          // We need to do this as opposed to in_array thanks to extra spaces that may
          // appear at the end of items in the textarea boxes.
          $lines = FALSE;
          foreach ($repos_line as $rline) {
            if (trim($rline) == $repo) {
              $lines = TRUE;
              break;
            }
          }
          if ($lines == TRUE && !empty($commit->links->patch->href)) {
            $patch = $commit->links->patch->href;
            $file = _bitbucket_commits_api_call($patch, $username, $password);
            $lines = explode("\n", $file);

            $parse_line = 0;
            foreach($lines as $key => $line) {
              if (strpos($line, 'changed')) {
                $parse_line = $key;
                break;
              }
            }
            if ($parse_line != 0) {
              $lines[$parse_line] = trim($lines[$parse_line]);
              $items = explode(', ', $lines[$parse_line]);

              $files = (!empty($items[0])) ? $items[0] : 0;
              $plus = (!empty($items[1])) ? $items[1] : 0;
              $minus = (!empty($items[2])) ? $items[2] : 0;

              if (!empty($files)) {
                $files = explode(' ', $files);
                $files_changed = (int) $files[0];
              }
              if (!empty($plus)) {
                $plus = explode(' ', $plus);
                $lines_added = (int) $plus[0];
              }
              if (!empty($minus)) {
                $minus = explode(' ', $minus);
                $lines_removed = (int) $minus[0];
              }
            }
          }

          $centry = array(
            'cid' => $cid,
            'commit_message' => addslashes($message),
            'commit_date' => $commit->date,
            'project' => $project,
            'files_changed' => $files_changed,
            'lines_added' => $lines_added,
            'lines_removed' => $lines_removed,
          );
          drupal_write_record('commits', $centry);

          $commits = db_select('commits_digest', 'cd')
                      ->fields('cd')
                      ->condition('commit_date', $commit_date . ' 00:00:00')
                      ->execute();
          if ($commits->rowCount() > 0) {
            $commits_data = $commits->fetchObject();
            $commits_data->commits++;
            $centry = array(
              'commit_date' => $commit_date . " 00:00:00",
              'commits' => $commits_data->commits,
            );
            drupal_write_record('commits_digest', $centry, array('commit_date'));
          }
          else {
           $centry = array(
              'commit_date' => $commit_date . " 00:00:00",
              'commits' => 1,
            );
            drupal_write_record('commits_digest', $centry);
          }
        }
      } 
      if (!empty($json->next)) {
        $url = $json->next;
      }
    } while(!empty($json->next));
  }
  // Save the information on our repositories to the database.
  if (count($repositories) > 0) {
    foreach($repositories as $repository) {
      $is_private = ($repository->is_private == 1) ? 1 : 0;
      db_merge('commits_projects')
        ->key(array('full_name' => $repository->full_name))
        ->fields(array(
          'full_name' => $repository->full_name,
          'name' => $repository->name,
          'is_private' => $is_private,
          'website' => $repository->website,
          'language' => $repository->language,
          'description' => $repository->description,
          ))
        ->execute();
    }
  }
}

/**
 * Helper function to make API call to BitBucket (authenticated)
 *
 * @param string $url
 * The URL we are calling.
 *
 * @param string $username
 * The username for our authentication
 *
 * @param string $password
 * The password for the username provided.
 *
 * @return string $results
 * The JSON string from BitBucket to be parsed.
 */
function _bitbucket_commits_api_call($url, $username, $password) {
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_TIMEOUT, 30);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_ANY);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
  curl_setopt($ch, CURLOPT_COOKIEFILE, 'cookiefile.txt');
  curl_setopt($ch, CURLOPT_HTTPHEADER,
    array(
      "Authorization: Basic " . base64_encode($username . ":" . $password)
    )
  );
  curl_setopt($ch, CURLOPT_USERPWD, "$username:$password");
  $status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
  $result = curl_exec ($ch);
  curl_close($ch);

  if ($result == 'Rate limit for this resource has been exceeded') {
    return FALSE;
  }

  return $result;
}

/**
 * Implements hook_theme().
 */
function bitbucket_commits_theme($existing, $type, $theme, $path) {
  return array(
    'bitbucket_commits_svg' => array(
      'template' => 'bitbucket-commits-svg',
      'variables' => array('width' => 721, 'height' => 110, 'class' => NULL, 'weeks' => NULL, 'offset_x' => 20, 'offset_y' => 20),
    ),
    'bitbucket_commits_svg_week' => array(
      'template' => 'bitbucket-commits-svg-week',
      'variables' => array('x' => 0, 'y' => 0, 'rects' => NULL),
    ),
    'bitbucket_commits_svg_rect' => array(
      'template' => 'bitbucket-commits-svg-rect',
      'variables' => array('class' => NULL, 'width' => 11, 'height' => 11, 'y' => 0, 'fill_color' => NULL, 'tooltip' => NULL),
    ),
    'bitbucket_commits_svg_month_header' => array(
      'template' => 'bitbucket-commits-svg-month-header',
      'variables' => array('x' => 0, 'y' => 0, 'class' => NULL, 'month' => NULL),
    ),
    'bitbucket_commits_lines_added' => array(
      'variables' => array('end_date' => NULL),
    ),
    'bitbucket_commits_lines_removed' => array(
      'variables' => array('end_date' => NULL),
    ),
    'bitbucket_commits_activity_graph' => array(
      'variables' => array('end_date' => NULL, 'color_scheme' => NULL, 'color1' => NULL, 'color2' => NULL, 'color3' => NULL, 'color4' => NULL),
    ),
    'bitbucket_commits_block' => array(
      'variables' => array('graph' => NULL, 'lines_added' => NULL, 'lines_removed' => NULL, 'commits' => NULL, 'max_streak' => NULL, 'current_streak' => NULL, 'total_commits' => NULL),
      'template' => 'bitbucket-commits-block',
    ),
  );
}

/**
 * Our one year graph comparable to the one provied by github.
 * We need to get the date of the first saturday beyond the end date provided and use that
 * as our end date.
 */ 
function bitbucket_commit_year_box_graph($end_date, $theme_color_scheme = NULL, $color1 = NULL, $color2 = NULL, $color3 = NULL, $color4 = NULL, $color5 = NULL) {

  // If the end date is not a Saturday, get the date until the next Saturday.
  if (date('l', strtotime($end_date)) != 'Saturday') {
    $end_date = date('Y-m-d', strtotime('next Saturday', strtotime($end_date)));
  }

  $end_date_time = strtotime($end_date);
  $start_date = date('Y-m-d', $end_date_time - (86400*364));
  $start_date = date('Y-m-d', strtotime('previous Sunday', strtotime($start_date)));
  $start_date_time = strtotime($start_date);
  $graph = array();
  for($i = $start_date_time; $i <= $end_date_time; $i += 86400) {
    $current_date = date('Y-m-d', $i);
    $graph[$current_date] = array(
      'commits' => 0,
      'date' => date('m/d/Y', $i),
    );
  }

  $result = db_select('commits_digest', 'c')
            ->fields('c')
            ->where("commit_date >= DATE_SUB('" . $end_date . "', INTERVAL 364 DAY)")
            ->condition('commit_date', $end_date, '<=')
            ->orderBy('commit_date', 'ASC')
            ->execute();       
  while($ddata = $result->fetchObject()) {
    list($commit_date, $x) = explode(' ', $ddata->commit_date);
    $graph[$commit_date]['commits'] = $ddata->commits;
  }

  // Sort the graph by date, which is in the key.
  ksort($graph);

  $y = $position = 0;
  $rects = $weeks = $year_graph = $current_month = NULL;
  $month_header = array();

  foreach($graph as $date => $data) {
    if (date('l', strtotime($date)) == 'Sunday') {
      if ($position > 0) {
        $weeks .= theme('bitbucket_commits_svg_week',  array('x' => (13 * ($position - 1)), 'y' => 0, 'rects' => $rects));
        $rects = NULL;
      }
      if (date('M', strtotime($date)) != $current_month) {
        $current_month = date('M', strtotime($date));
        $month_header[] = array(
          'month' => $current_month,
          'x' => 13 * $position,
        );
      }
      $y = 0;
      $x = 11 * $position;
      $position++;
    }

    $color_scheme = variable_get('bitbucket_activity_color_scheme', 'green');
    $color['grey'] = array('#EAEAEA', '#C0C0C0', '#A0A0A0', '#606060', '#202020');
    $color['red'] = array('#EAEAEA', '#FFC0C0', '#FFA0A0', '#FF6060', '#FF2020');
    $color['green'] = array('#EAEAEA', '#C0D0C0', '#A0D0A0', '#60D060', '#20D020');
    $color['blue'] = array('#EAEAEA', '#C0C0FF', '#A0A0FF', '#6060FF', '#2020FF');
    $color['yellow'] = array('#EAEAEA', '#DDDD20', '#CCCC20', '#BBBB20', '#AAAA20');
    $color['orange'] = array('#EAEAEA', '#fce2b4', '#fbd38e', '#fcc35f', '#feae22');
    $color['brown'] = array('#EAEAEA', '#d2bc97', '#be9d63', '#a58246', '#9d6400');
    $color['purple'] = array('#EAEAEA', '#fcd5f7', '#fca8f1', '#fd68ea', '#fd2de2');
    $color['pink'] = array('#EAEAEA', '#ffd7eb', '#febcdd', '#fc8ec5', '#FF69B4');
    $color['github'] = array('#EAEAEA', '#cde372', '#7bbd52', '#389631', '#1a571b');

    // If the custom color is provided in our UI, then assign the colors to our color
    // scheme for processing.
    if ($color_scheme == 'custom') {
      $color['custom'] = array(
        variable_get('bitbucket_activity_custom_color1', NULL),
        variable_get('bitbucket_activity_custom_color2', NULL),
        variable_get('bitbucket_activity_custom_color3', NULL),
        variable_get('bitbucket_activity_custom_color4', NULL),
        variable_get('bitbucket_activity_custom_color5', NULL),
      );
    }

    // If we are being passed a custom color scheme via the theme function, then we have
    // to assign our colors as follows.
    if (!empty($theme_color_scheme)) {
      $color_scheme = 'theme';
      $color['theme'] = array($color1, $color2, $color3, $color4, $color5);
    }

    if ($data['commits'] == 0) {
      $fill_color = $color[$color_scheme][0];
      $tooltip = 'No Commits on ' . date('m/d/Y', strtotime($date));
    }
    elseif ($data['commits'] < 4) {
      $fill_color = $color[$color_scheme][1];
      $tooltip = $data['commits'] . ' Commits on ' . date('m/d/Y', strtotime($date));
    }
    elseif ($data['commits'] < 7) {
      $fill_color = $color[$color_scheme][2];
      $tooltip = $data['commits'] . ' Commits on ' . date('m/d/Y', strtotime($date));
    }
    elseif ($data['commits'] < 10) {
      $fill_color = $color[$color_scheme][3];
      $tooltip = $data['commits'] . ' Commits on ' . date('m/d/Y', strtotime($date));
    }
    else {
      $fill_color = $color[$color_scheme][4];
      $tooltip = $data['commits'] . ' Commits on ' . date('m/d/Y', strtotime($date));
    }

    $y = 13 * date('w', strtotime($date));

    $rects .= theme('bitbucket_commits_svg_rect', array(
      'class' => 'day', 'width' => 11, 'height' => 11, 'y' => $y, 
      'fill_color' => $fill_color, 'tooltip' => $tooltip));
  }

  // Output the last row since it is not tripped by the date catch at the beginning of
  // the loop on the last iteration.
  $weeks .= theme('bitbucket_commits_svg_week',  array('x' => (13 * ($position - 1)), 'y' => 0, 'rects' => $rects));

  $mh = NULL;
  foreach($month_header as $month) {
    $mh .= theme('bitbucket_commits_svg_month_header', array('x' => $month['x'], 'y' => -5, 'class' => 'month' , 'month' => $month['month']));
  }

  return theme('bitbucket_commits_svg', array('width' => 721, 'height' => 110, 'class' => NULL, 'weeks' => $weeks, 'month_header' => $mh, 'offset_x' => 20, 'offset_y' => 20));
}

/**
 * Theme function for generating activity graph.
 *
 * @param string $end_date
 * The ending date for which data should be collected. Rounds to the next Saturday.
 *
 * @return string $html
 * The HTML of the rendered graph.
 */
function theme_bitbucket_commits_activity_graph($data = NULL) {
  if (empty($data['end_date'])) {
    $end_date = date('Y-m-d');
  }
  else {
    $end_date = date('Y-m-d', strtotime($data['end_date']));
  }
  return bitbucket_commit_year_box_graph($end_date);
}

/**
 * Theme function for getting the number of commit lines added.
 *
 * @param string $end_date
 * The ending date for which data should be collected. Rounds to the next Saturday.
 *
 * @return int $lines
 * The number of lines added.
 */
function theme_bitbucket_commits_lines_added($data = NULL) {
  if (empty($data['end_date'])) {
    $end_date = date('Y-m-d');
  }
  else {
    $end_date = date('Y-m-d', strtotime($data['end_date']));
  }
  $result = db_query("SELECT SUM(lines_added) AS lines_added FROM {commits} WHERE commit_date <= '" . $end_date . "'");
  $lines = $result->fetchObject();
  return $lines->lines_added;
}

/**
 * Theme function for getting the number of commit lines removed.
 *
 * @param string $end_date
 * The ending date for which data should be collected. Rounds to the next Saturday.
 *
 * @return int $lines
 * The number of lines removed.
 */
function theme_bitbucket_commits_lines_removed($data = NULL) {
  if (empty($data['end_date'])) {
    $end_date = date('Y-m-d');
  }
  else {
    $end_date = date('Y-m-d', strtotime($data['end_date']));
  }

  $result = db_query("SELECT SUM(lines_removed) AS lines_removed FROM {commits} WHERE commit_date <= '" . $end_date . "'");
  $lines = $result->fetchObject();
  return $lines->lines_removed;
}

/**
 * Get the commits per project within the given interval of a given date.
 *
 * @param int $interval
 * The interval within the given date (in days). Defaults to 14.
 *
 * @param string $date
 * The date to be used around the interval. Defaults to the current date.
 *
 * @return array $commits
 * An array of the commit counts and projects sorted in reverse order by commit count.
 */
function bitbucket_commits_project_commit_interval_count($interval = 14, $date = NULL) {
  if (empty($date)) {
    $date = date('Y-m-d');
  }
  $result = db_query("SELECT COUNT(*) as commit_count, project FROM commits 
                      WHERE commit_date >= DATE_SUB('" . $date . "', INTERVAL " . $interval . " DAY) 
                      GROUP by project ORDER BY commit_count DESC");
  $commits = array();
  while($cdata = $result->fetchObject) {
    $commits[] = array(
      'project' => $cdata->project,
      'commits' => $cdata->commit_count,
    );
  }
  return $commits;
}

/**
 * Get repository information for a specific repo (API Call)
 *
 * @param string $repo
 * The repository we are getting information on
 *
 * @param string $username
 * The username for our authentication
 *
 * @param string $password
 * The password for the username provided.
 *
 * @return string $results
 * The JSON decoded array from BitBucket to be parsed.
*/
function bitbucket_commits_get_repository_information($repo, $username, $password) {
  $url = 'https://api.bitbucket.org/2.0/repositories/' . $repo;
  $result = json_decode(_bitbucket_commits_api_call($url, $username, $password));
  return $result;
}

/**
 * Implements hook_help().
 */
function bitbucket_commits_help($path, $arg) {
  $output = NULL;
  switch($path) {
    case 'admin/help#bitbucket_commits':
      $output .= '<h4>' . t('BitBucket Commits Overview') . '</h4>';
      $output .= 'Wiki Documentation: <a href="https://bitbucket.org/mrbagnall/bitbucket_commits/wiki/Home">https://bitbucket.org/mrbagnall/bitbucket_commits/wiki/Home</a><br /><br />';
      $output .= t('This is the documentation wiki for the BitBucket Commits module for Drupal. It contains the information and instructions you will need to get up and running using this module. The contents of this wiki are also contained in the advanced help section of the module available if you have the Advanced Help contributed module installed on your installation of Drupal.') . '<br /><br />';
      $output .= '<h4>' . t('Features') . "</h4>";
      $output .= t('The purpose of this module is to provide a GitHub style activity graph to for your BitBucket git repository. It can provide statistics on public and/or private repositories and can also provide additional statistics such as numbers of lines committed and removed from repositories. Over time, these reports and statistics will become more granular so they can be used in a variety of ways on your Drupal Site.') . '<br /><br />';
      $output .= t('The main target for this module are developers who wish to report their activity on a web site such as a personal web site or blog. At some point, it may become possible to include the graph via a javascript "bug" on a target web site, but that functionality is planned down the road.') . '<br /><br />';
      $output .= '<div style="border-top: 2px solid #f8981d; margin: 15px 0px; padding-top: 15px; width: 100%; font-size: 8pt; line-height: 1.3em;">';
      $output .= '<img src="/' . drupal_get_path('module', 'bitbucket_commits') . '/images/flyingflip-logo.png" width="151" height="50" alt="FlyingFlip Studios" align="right" /><br />';
      $output .= 'Released 2016 - v7.x-1.x - FlyingFlip Studios, LLC. - Released under GNU GENERAL PUBLIC LICENSE - Version 2, June 1991<br />http://www.michaelbagnall.com - @flyingflip - @mbagnall17<br clear="right">';
      $output .= '<style>.item-list, hr { display: none; }</style></div>';      
      break;
  }
  return $output;
}

/**
 * Implements hook_block_info().
 */
function bitbucket_commits_block_info() {
  $blocks = array();
  $blocks['bitbucket'] = array(
    'info' => t('BitBucket Statistics'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function bitbucket_commits_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'bitbucket':
      $block['subject'] = t('BitBucket Statistics');
      $block['content'] = array(
        '#markup' => bitbucket_commits_block_html(),
        '#attached' => array(
          drupal_get_path('module', 'bitbucket_commits') . '/css/style.css',
        ),
      );
      break;
  }
  return $block;
}

/**
 * Implements hook_block_configure().
 */
function bitbucket_commits_block_configure($delta = '') {
  $form = array();
  if ($delta == 'bitbucket') {
    $form['bitbucket_commits'] = array(
      '#type' => 'fieldset',
      '#title' => 'BitBucket Settings',
    );
    $form['bitbucket_commits']['bitbucket_commits_recent_commits_repo_days'] = array(
      '#type' => 'textfield',
      '#title' => 'Display commit repo details for how many days?',
      '#description' => t('Setting this to 0 will disable the functionality, otherwise set to the commit activity statistics for an interval of this many days.'),
      '#default_value' => variable_get('bitbucket_commits_recent_commits_repo_days', 14),
      '#required' => TRUE,
      '#maxlength' => 3,
      '#size' => 3,
      '#weight' => 9,
    );
    $form['bitbucket_commits']['bitbucket_commits_recent_commits_repo_days_private'] = array(
      '#type' => 'checkbox',
      '#title' => 'Include private repositories in the recent commits option above?',
      '#options' => array(
        '1' => t('Yes'),
        '0' => t('No'),
      ),
      '#default_value' => variable_get('bitbucket_commits_recent_commits_repo_days_private', 1),
      '#weight' => 10,
    );
    $form['bitbucket_commits']['bitbucket_commits_display_line_stats'] = array(
      '#type' => 'checkbox',
      '#title' => 'Display per line statistics in block?',
      '#options' => array(
        '1' => t('Yes'),
        '0' => t('No'),
      ),
      '#default_value' => variable_get('bitbucket_commits_display_line_stats', 1),
      '#weight' => 11,
    );
  }
  return $form;
}

/**
 * Output the HTML for our block.
 */
function bitbucket_commits_block_html() {
  $repo_days = variable_get('bitbucket_commits_recent_commits_repo_days', 0);
  $private = variable_get('bitbucket_commits_recent_commits_repo_days_private', 1);
  $line_stats = variable_get('bitbucket_commits_display_line_stats', 1).
  $max_streak = bitbucket_commits_sequential_streak();
  $current_streak = bitbucket_commits_current_streak();
  $total_commits = bitbucket_commits_total_commits();
  
  $commits = array();
  $lines_added = $lines_removed = NULL;
  $graph = bitbucket_commit_year_box_graph(date('Y-m-d'));
  if (!empty($repo_days)) {
    $commits = bitbucket_commits_project_commit_interval_count($repo_days, date('Y-m-d'), $private);
  }
  if (!empty($line_stats)) {
    $lines_added = theme('bitbucket_commits_lines_added');
    $lines_removed = theme('bitbucket_commits_lines_removed');
  }
  $graph =  theme('bitbucket_commits_block', 
    array('graph' => $graph, 'commits' => $commits, 'lines_added' => $lines_added, 
          'lines_removed' => $lines_removed, 'max_streak' => $max_streak, 
          'current_streak' => $current_streak, 'total_commits' => $total_commits));
  return $graph;
}

function bitbucket_commits_sequential_streak() {
  $end_date = date('Y-m-d');
  // If the end date is not a Saturday, get the date until the next Saturday.
  if (date('l', strtotime($end_date)) != 'Saturday') {
    $end_date = date('Y-m-d', strtotime('next Saturday', strtotime($end_date)));
  }

  $result = db_select('commits_digest', 'c')
            ->fields('c')
            ->where("commit_date >= DATE_SUB('" . $end_date . "', INTERVAL 364 DAY)")
            ->condition('commit_date', $end_date, '<=')
            ->orderBy('commit_date', 'ASC')
            ->execute();       
  $tomorrow = NULL;
  $sequential = $max_sequential = 0;
  while($ddata = $result->fetchObject()) {
    list($commit_date, $x) = explode(' ', $ddata->commit_date);
    if ($commit_date == $tomorrow) {
      $sequential++;
    }
    else {
      if ($sequential > $max_sequential) {
        $max_sequential = $sequential;
      }
      $sequential = 0;
    }
    $tomorrow = date('Y-m-d', strtotime('tomorrow', strtotime($commit_date)));
  }
  return $max_sequential;
}

function bitbucket_commits_current_streak() {
  $end_date = $yesterday = date('Y-m-d');
  $sequential = 0;
  $result = db_select('commits_digest', 'c')
            ->fields('c')
            ->where("commit_date >= DATE_SUB('" . $end_date . "', INTERVAL 364 DAY)")
            ->condition('commit_date', $end_date, '<=')
            ->orderBy('commit_date', 'DESC')
            ->execute();
  while($ddata = $result->fetchObject()) {
    list($commit_date, $x) = explode(' ', $ddata->commit_date);
    if ($commit_date == $yesterday) {
      $sequential++;
    }
    else {
      $max_sequential = $sequential;
      break;
    }
    $yesterday = date('Y-m-d', strtotime('yesterday', strtotime($commit_date)));
  }
  return $max_sequential;
}

function bitbucket_commits_total_commits() {
  $end_date = $yesterday = date('Y-m-d');
  $result = db_query("SELECT SUM(commits) AS commits 
                      FROM {commits_digest} 
                      WHERE commit_date >= DATE_SUB('" . $end_date . "', INTERVAL 364 DAY)");
  $lines = $result->fetchObject();
  return $lines->commits;
}