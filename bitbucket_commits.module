<?php

/**
 * Implements hook_menu().
 */
function bitbucket_commits_menu() {
  $items = array();
  $items['admin/config/development/bitbucket'] = array(
    'title' => 'Bitbucket Settings',
    'description' => t('Settings for accessing BitBucket API as well as repositories to pull data from'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bitbucket_commits_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('access bitbucket settings'),
  );
  $items['bitbucket'] = array(
    'title' => 'Bitbucket Statistics',
    'page callback' => 'bitbucket_commits_statistics',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function bitbucket_commits_permission() {
  return array(
    'access bitbucket settings' => array(
      'title' => 'Settings',
    ),
  );
}

/**
 * Administrative settings callback form.
 */
function bitbucket_commits_settings_form($form, &$form_state) {
  $form['bitbucket_username'] = array(
    '#title' => 'BitBucket Username',
    '#type' => 'textfield',
    '#size' => 64,
    '#maxlength' => 64,
    '#default_value' => variable_get('bitbucket_username', NULL),
  );
  $form['bitbucket_password'] = array(
    '#title' => 'BitBucket Password',
    '#type' => 'password',
    '#size' => 64,
    '#maxlength' => 64,
    '#default_value' => variable_get('bitbucket_username', NULL),
  );
  $form['bitbucket_repositories'] = array(
    '#title' => 'BitBucket Repositories',
    '#description' => t('One repository per line. Prefix with username/reponame'),
    '#type' => 'textarea',
    '#default_value' => variable_get('bitbucket_repositories', NULL),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_cron().
 */
function bitbucket_commits_cron() {
  _bitbucket_commits_retrieve();
}

/**
 * Retrieve all of the commits configured from bitbucket.
 */
function _bitbucket_commits_retrieve() {
  $repos = variable_get('bitbucket_repositories', FALSE);
  $username = variable_get('bitbucket_username', NULL);
  $password = variable_get('bitbucket_password', NULL);
  
  if (empty($repos)) {
    return FALSE;
  }

  $repos = explode("\n", $repos);
  foreach($repos as $repo) {
    if (empty($repo)) {
      continue;
    }
    $url = 'https://api.bitbucket.org/2.0/repositories/' . trim($repo) . '/commits';
    do {   
      $ch = curl_init();
      curl_setopt($ch, CURLOPT_URL, $url);
      curl_setopt($ch, CURLOPT_TIMEOUT, 30); //timeout after 30 seconds
      curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
      curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_ANY);
      curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
      curl_setopt($ch, CURLOPT_USERPWD, "$username:$password");
      $status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);   //get status code
      $result = curl_exec ($ch);
      curl_close($ch);

      $json = json_decode($result);      
      if (empty($json->values)) {
        drupal_set_message('No repository named ' . $repo . '.', 'error');
        break;
      }
      if (count($json->values) > 0) {
        foreach ($json->values as $commit) {
          $cid = $commit->hash;
          $project = $commit->repository->full_name;
          $message = $commit->message;
          $cdate = substr($commit->date, 0, 10) . ' 00:00:00';
          
          // If we already have this hash, then continue to the next one.
          $check = db_select('commits', 'c')
                    ->fields('c')
                    ->condition('cid', $cid)
                    ->execute();
          if ($check->rowCount() > 0) {
            break;
          }

          $centry = array(
            'cid' => $cid,
            'commit_message' => addslashes($message),
            'commit_date' => $cdate,
            'project' => $project,
          );
          drupal_write_record('commits', $centry);

          $commits = db_select('commits_digest', 'cd')
                      ->fields('cd')
                      ->condition('commit_date', $cdate)
                      ->execute();
          if ($commits->rowCount() > 0) {
            $commits_data = $commits->fetchObject();
            $commits_data->commits++;
            $centry = array(
              'commit_date' => $cdate,
              'commits' => $commits_data->commits,
            );
            drupal_write_record('commits_digest', $centry, array('commit_date'));
          }
          else {
           $centry = array(
              'commit_date' => $cdate,
              'commits' => 1,
            );
            drupal_write_record('commits_digest', $centry);
          }
        }
      }
      if (!empty($data->next)) {
        $url = $data->next;
      }
    } while(!empty($data->next));
  }
}