<?php

/**
 * Implements hook_menu().
 */
function bitbucket_commits_menu() {
  $items = array();
  $items['admin/config/development/bitbucket'] = array(
    'title' => 'Bitbucket Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bitbucket_commits_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('access bitbucket settings'),
  );
  $items['admin/config/development/bitbucket/api'] = array(
    'title' => 'API Settings',
    'description' => t('Settings for accessing BitBucket API as well as repositories to pull data from.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bitbucket_commits_api_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('access bitbucket settings'),
  );
  $items['admin/config/development/bitbucket/display'] = array(
    'title' => 'Display Settings',
    'description' => t('Configure colors and display configuration settings for statistic graphs.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bitbucket_commits_display_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('access bitbucket settings'),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function bitbucket_commits_permission() {
  return array(
    'access bitbucket settings' => array(
      'title' => 'Settings',
    ),
  );
}

/**
 * API settings callback form.
 */
function bitbucket_commits_api_settings_form($form, &$form_state) {
  $form['bitbucket_username'] = array(
    '#title' => 'BitBucket Username',
    '#type' => 'textfield',
    '#size' => 64,
    '#maxlength' => 64,
    '#default_value' => variable_get('bitbucket_username', NULL),
  );
  $form['bitbucket_password'] = array(
    '#title' => 'BitBucket Password',
    '#type' => 'password',
    '#size' => 64,
    '#maxlength' => 64,
    '#default_value' => variable_get('bitbucket_password', NULL),
  );
  $form['bitbucket_repositories'] = array(
    '#title' => 'BitBucket Repositories',
    '#description' => t('One repository per line. Prefix with username/reponame'),
    '#type' => 'textarea',
    '#default_value' => variable_get('bitbucket_repositories', NULL),
  );
  $form['bitbucket_repositories_line_numbers'] = array(
    '#title' => 'BitBucket Repositories For Line Number Statistics',
    '#description' => t('One repository per line. Prefix with username/reponame. These are the repositories to track the number of line changes.'),
    '#type' => 'textarea',
    '#default_value' => variable_get('bitbucket_repositories_line_numbers', NULL),
  );
  $form['submit'] = array(
    '#title' => 'Submit',
    '#value' => 'Submit',
  );
  return $form;
}

/**
 * Submit callback for our API settings form. Handles password input so that if the password
 * field is empty and a password is already assigned, then it maintains the previously given
 * password. Also processes other api configuration values.
 */
function bitbucket_commits_api_settings_form_submit($form, &$form_state) {
  $current_password = variable_get('bitbucket_password', NULL);
  if ((!empty($current_password) && !empty($form_state['values']['bitbucket_password'])) || (empty($current_password))) {
    variable_set('bitbucket_password', $form_state['values']['bitbucket_password']);
  }

  $current_password = variable_get('bitbucket_password', NULL);
  if (!current_password) {
    form_set_error('bitbucket_password', 'You must provide a password for this bitbucket account.');
  }
  else {
    variable_set('bitbucket_username', $form_state['values']['bitbucket_username']);
    variable_set('bitbucket_repositories', $form_state['values']['bitbucket_repositories']);
    variable_set('bitbucket_repositories_line_numbers', $form_state['values']['bitbucket_repositories_line_numbers']);
    variable_set('bitbucket_username', $form_state['values']['bitbucket_username']);    
    drupal_set_message('BitBucket API settings successfully updated.', 'status');
    drupal_goto('admin/config/development/bitbucket/api');
  }
}

/**
 * Display settings administrative form.
 */
function bitbucket_commits_display_settings_form($form, &$form_state) {
  $form['bitbucket_activity_color_scheme'] = array(
    '#type' => 'select',
    '#title' => 'Color Scheme',
    '#description' => 'Select a color scheme for the contribution activity graph.',
    '#options' => array(
      'grey' => t('Grey'),
      'red' => t('Red'),
      'green' => t('Green'),
      'blue' => t('Blue'),
      'yellow' => t('Yellow'),
      'orange' => t('Orange'),
      'brown' => t('Brown'),
      'purple' => t('Purple'),
      'pink' => t('Pink'),
      'custom' => t('Custom (must provide hex values)'),
    ),
    '#default_value' => variable_get('bitbucket_activity_color_scheme', 'green'),
    '#required' => TRUE,
  );
  return $form;
}

/**
 * Submit callback for the displays administrative form.
 */
function bitbucket_commits_display_settings_form_submit($form, &$form_state) {
}

/**
 * Implements hook_cron().
 */
function bitbucket_commits_cron() {
  _bitbucket_commits_retrieve();
}

/**
 * Retrieve all of the commits configured from bitbucket.
 */
function _bitbucket_commits_retrieve() {
  $repos = variable_get('bitbucket_repositories', FALSE);
  $repos_line = variable_get('bitbucket_repositories_line_numbers', FALSE);
  $username = variable_get('bitbucket_username', NULL);
  $password = variable_get('bitbucket_password', NULL);

  if (!empty($repos_line)) {
    $repos_line = explode("\n", $repos_line);
  }

  if (empty($repos)) {
    return FALSE;
  }

  $repos = explode("\n", $repos);
  foreach($repos as $repo) {
    if (empty($repo)) {
      continue;
    }

    $repo = trim($repo);
    $url = 'https://api.bitbucket.org/2.0/repositories/' . $repo . '/commits';
    do {   
      $result = _bitbucket_commits_api_call($url, $username, $password);
      $json = json_decode($result);

      if (empty($json->values)) {
        drupal_set_message('No repository named ' . $repo . '.', 'error');
        break;
      }
      if (count($json->values) > 0) {
        foreach ($json->values as $commit) {      
          $cid = $commit->hash;
          $project = $commit->repository->full_name;
          $message = $commit->message;
          $cdate = substr($commit->date, 0, 10) . ' 00:00:00';

          // If we already have this hash, then continue to the next one.
          $check = db_select('commits', 'c')
                    ->fields('c')
                    ->condition('cid', $cid)
                    ->execute();
          if ($check->rowCount() > 0) {
            continue;
          }

          $files_changed = $lines_added = $lines_removed = 0;
          // We need to do this as opposed to in_array thanks to extra spaces that may
          // appear at the end of items in the textarea boxes.
          $lines = FALSE;
          foreach ($repos_line as $rline) {
            if (trim($rline) == $repo) {
              $lines = TRUE;
              break;
            }
          }
          if ($lines == TRUE && !empty($commit->links->patch->href)) {
            $patch = $commit->links->patch->href;
            $file = _bitbucket_commits_api_call($patch, $username, $password);
            $lines = explode("\n", $file);

            $parse_line = 0;
            foreach($lines as $key => $line) {
              if (strpos($line, 'changed')) {
                $parse_line = $key;
                break;
              }
            }
            if ($parse_line != 0) {
              $lines[$parse_line] = trim($lines[$parse_line]);
              $items = explode(', ', $lines[$parse_line]);

              $files = (!empty($items[0])) ? $items[0] : 0;
              $plus = (!empty($items[1])) ? $items[1] : 0;
              $minus = (!empty($items[2])) ? $items[2] : 0;

              if (!empty($files)) {
                $files = explode(' ', $files);
                $files_changed = (int) $files[0];
              }
              if (!empty($plus)) {
                $plus = explode(' ', $plus);
                $lines_added = (int) $plus[0];
              }
              if (!empty($minus)) {
                $minus = explode(' ', $minus);
                $lines_removed = (int) $minus[0];
              }
            }
          }

          $centry = array(
            'cid' => $cid,
            'commit_message' => addslashes($message),
            'commit_date' => $cdate,
            'project' => $project,
            'files_changed' => $files_changed,
            'lines_added' => $lines_added,
            'lines_removed' => $lines_removed,
          );
          drupal_write_record('commits', $centry);

          $commits = db_select('commits_digest', 'cd')
                      ->fields('cd')
                      ->condition('commit_date', $cdate)
                      ->execute();
          if ($commits->rowCount() > 0) {
            $commits_data = $commits->fetchObject();
            $commits_data->commits++;
            $centry = array(
              'commit_date' => $cdate,
              'commits' => $commits_data->commits,
            );
            drupal_write_record('commits_digest', $centry, array('commit_date'));
          }
          else {
           $centry = array(
              'commit_date' => $cdate,
              'commits' => 1,
            );
            drupal_write_record('commits_digest', $centry);
          }
        }
      }
      if (!empty($data->next)) {
        $url = $data->next;
      }
    } while(!empty($data->next));
  }
}

function _bitbucket_commits_api_call($url, $username, $password) {
  $result = `curl --user mrbagnall:SailAway77 $url`;
  /*
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_TIMEOUT, 30);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_ANY);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
  curl_setopt($ch, CURLOPT_USERPWD, "$username:$password");
  $status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
  $result = curl_exec ($ch);
  curl_close($ch);
  */
  return $result;
}


/**
 * Implements hook_theme().
 */
function bitbucket_commits_theme($existing, $type, $theme, $path) {
  return array(
    'bitbucket_commits_svg' => array(
      'template' => 'bitbucket-commits-svg',
      'variables' => array('width' => 721, 'height' => 110, 'class' => NULL, 'weeks' => NULL, 'offset_x' => 20, 'offset_y' => 20),
    ),
    'bitbucket_commits_svg_week' => array(
      'template' => 'bitbucket-commits-svg-week',
      'variables' => array('x' => 0, 'y' => 0, 'rects' => NULL),
    ),
    'bitbucket_commits_svg_rect' => array(
      'template' => 'bitbucket-commits-svg-rect',
      'variables' => array('class' => NULL, 'width' => 11, 'height' => 11, 'y' => 0, 'fill_color' => NULL, 'tooltip' => NULL),
    ),
    'bitbucket_commits_lines_added' => array(
      'variables' => array('end_date' => NULL),
    ),
    'bitbucket_commits_lines_removed' => array(
      'variables' => array('end_date' => NULL),
    ),
    'bitbucket_commits_activity_graph' => array(
      'variables' => array('end_date' => NULL),
    ),
  );
}

/**
 * Our one year graph comparable to the one provied by github.
 * We need to get the date of the first saturday beyond the end date provided and use that
 * as our end date.
 */ 
function bitbucket_commit_year_box_graph($end_date) {

  // If the end date is not a Saturday, get the date until the next Saturday.
  if (date('l', strtotime($end_date)) != 'Saturday') {
    $end_date = date('Y-m-d', strtotime('next Saturday', strtotime($end_date)));
  }

  $end_date_time = strtotime($end_date);
  $start_date = date('Y-m-d', $end_date_time - (86400*364));
  $start_date = date('Y-m-d', strtotime('previous Sunday', strtotime($start_date)));
  $start_date_time = strtotime($start_date);

  $graph = array();
  for($i = $start_date_time; $i <= $end_date_time; $i += 86400) {
    $current_date = date('Y-m-d', $i);
    $graph[$current_date] = array(
      'commits' => 0,
      'date' => date('m/d/Y', $i),
    );
  }

  $result = db_select('commits_digest', 'c')
            ->fields('c')
            ->where("commit_date >= DATE_SUB('" . $end_date . "', INTERVAL 364 DAY)")
            ->condition('commit_date', $end_date, '<')
            ->orderBy('commit_date', 'ASC')
            ->execute();       
  while($ddata = $result->fetchObject()) {
    list($commit_date, $commit_time) = explode(' ', $ddata->commit_date);
    $graph[$commit_date]['commits'] = $ddata->commits;
  }

  // Sort the graph by date, which is in the key.
  ksort($graph);

  $y = $position = 0;
  $rects = $weeks = $year_graph = NULL;

  foreach($graph as $date => $data) {
    if (date('l', strtotime($date)) == 'Sunday') {
      if ($position > 0) {
        $weeks .= theme('bitbucket_commits_svg_week',  array('x' => (13 * ($position - 1)), 'y' => 0, 'rects' => $rects));
        $rects = NULL;
      }
      $y = 0;
      $x = 11 * $position;
      $position++;
    }

    if ($data['commits'] == 0) {
      $fill_color = '#EEEEEE';
      $tooltip = 'No Commits on ' . date('m/d/Y', strtotime($date));
    }
    elseif ($data['commits'] < 3) {
      $fill_color = '#A0A0A0';
      $tooltip = $data['commits'] . ' Commits on ' . date('m/d/Y', strtotime($date));
    }
    elseif ($data['commits'] < 7) {
      $fill_color = '#606060';
      $tooltip = $data['commits'] . ' Commits on ' . date('m/d/Y', strtotime($date));
    }
    else {
      $fill_color = '#202020';
      $tooltip = $data['commits'] . ' Commits on ' . date('m/d/Y', strtotime($date));
    }

    $y = 13 * date('w', strtotime($date));

    $rects .= theme('bitbucket_commits_svg_rect', array(
      'class' => 'day', 'width' => 11, 'height' => 11, 'y' => $y, 
      'fill_color' => $fill_color, 'tooltip' => $tooltip));
  }

  // Output the last row since it is not tripped by the date catch at the beginning of
  // the loop on the last iteration.
  $weeks .= theme('bitbucket_commits_svg_week',  array('x' => (13 * ($position - 1)), 'y' => 0, 'rects' => $rects));

  return theme('bitbucket_commits_svg', array('width' => 721, 'height' => 110, 'class' => NULL, 'weeks' => $weeks, 'offset_x' => 20, 'offset_y' => 20));
}

/**
 * Theme function for generating activity graph.
 *
 * @param string $end_date
 * The ending date for which data should be collected. Rounds to the next Saturday.
 *
 * @return string $html
 * The HTML of the rendered graph.
 */
function theme_bitbucket_commits_activity_graph($data = NULL) {
  if (empty($data['end_date'])) {
    $end_date = date('Y-m-d');
  }
  else {
    $end_date = date('Y-m-d', strtotime($data['end_date']));
  }
  return bitbucket_commit_year_box_graph($end_date);
}

function theme_bitbucket_commits_lines_added($data = NULL) {
  if (empty($data['end_date'])) {
    $end_date = date('Y-m-d');
  }
  else {
    $end_date = date('Y-m-d', strtotime($data['end_date']));
  }

  $result = db_query("SELECT SUM(lines_added) AS lines_added FROM {commits} WHERE commit_date <= '" . $end_date . "'");
  $lines = $result->fetchObject();
  return $lines->lines_added;
}

function theme_bitbucket_commits_lines_removed($data = NULL) {
  if (empty($data['end_date'])) {
    $end_date = date('Y-m-d');
  }
  else {
    $end_date = date('Y-m-d', strtotime($data['end_date']));
  }

  $result = db_query("SELECT SUM(lines_removed) AS lines_removed FROM {commits} WHERE commit_date <= '" . $end_date . "'");
  $lines = $result->fetchObject();
  return $lines->lines_removed;
}